import numpy as np
from gnuradio import gr


class blk(gr.sync_block):  # other base classes are basic_block, decim_block, interp_block
    """Generates random sine wave signals"""

    def __init__(self, num_signals=100, sampling_rate=100, time_duration=1,
                 frequency_range=(1, 10), amplitude_range=(0.5, 1.5), phase_range=(0, 2 * np.pi)):  # only default arguments here

        """Constructor"""
        gr.sync_block.__init__(
            self,
            name='Signal_generator_two',   # will show up in GRC
            in_sig=None,
            out_sig=[np.float32] # Output signal type
        )
        self.num_signals = num_signals
        self.sampling_rate = sampling_rate
        self.time_duration = time_duration
        self.frequency_range = frequency_range
        self.amplitude_range = amplitude_range
        self.phase_range = phase_range

        # Generate all signals in the constructor
        self.all_signals = []
        for _ in range(self.num_signals):
            frequency = np.random.uniform(*self.frequency_range)
            amplitude = np.random.uniform(*self.amplitude_range)
            phase = np.random.uniform(*self.phase_range)
        # Corrección de la fase al rango [0, 2π)
            phase = (phase + 2 * np.pi) % (2 * np.pi) 
            time = np.linspace(0, self.time_duration, int(self.sampling_rate * self.time_duration))
            signal = amplitude * np.sin(2 * np.pi * frequency * time + phase)
            self.all_signals.append(signal)

        self.signal_length = int(self.sampling_rate * self.time_duration)
        self.current_signal_index = 0 

    def work(self, input_items, output_items):
        """Generates and outputs signals sequentially"""

        # Calculate the start and end indices of the current signal
        start_index = self.current_signal_index * self.signal_length
        end_index = start_index + self.signal_length

        # Extract the current signal from the buffer
        current_signal = self.all_signals[self.current_signal_index]

        # Adjust output length to match current signal length
        output_len = min(len(output_items[0]), len(current_signal))

        # Output the current signal, ensuring size compatibility
        output_items[0][:output_len] = current_signal[:output_len] 

        # Move to the next signal, looping back to the beginning if necessary
        self.current_signal_index = (self.current_signal_index + 1) % self.num_signals 

        return output_len
