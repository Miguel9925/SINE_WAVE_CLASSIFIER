!pip install numpy matplotlib scikit-learn
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC  # Import regular SVC
import matplotlib.pyplot as plt

# 1. Cargar el dataset original (señales senoidales)
signals = np.load('signals_datasettwo.npy')
y_signals = np.ones(signals.shape[0])  # Etiqueta 1 para señales senoidales

# 2. Crear un dataset de señales "no senoidales" (ejemplo: ruido aleatorio)
num_noise_signals = 100  # Número de señales de ruido a generar
noise_signals = np.random.rand(num_noise_signals, signals.shape[1])
y_noise = np.zeros(num_noise_signals)  # Etiqueta 0 para señales de ruido

# 3. Combinar los datasets y etiquetas
X = np.vstack([signals, noise_signals])
y = np.concatenate([y_signals, y_noise])

# 4. Dividir en conjuntos de entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 5. Escalar los datos
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# 6. Entrenar un modelo SVM regular
model = SVC(kernel='rbf', random_state=42)  # Usar SVC en lugar de OneClassSVM
model.fit(X_train, y_train)

# Función para clasificar una señal de entrada
def classify_signal(input_signal, model, scaler):
    """
    Classifies an input signal as a sine wave or not.

    Args:
        input_signal (array): The input signal data.
        model (SVC): The trained SVM model.
        scaler (StandardScaler): The scaler used for preprocessing.

    Returns:
        bool: True if the input signal is classified as a sine wave, False otherwise.
    """

    # Extract features from the input signal (e.g., using FFT)
    frequencies = np.fft.fftfreq(len(input_signal), 1/100)  # Assuming sampling rate is 100
    fft_values = np.fft.fft(input_signal)
    dominant_frequency_index = np.argmax(np.abs(fft_values))
    frequency = frequencies[dominant_frequency_index]
    amplitude = np.abs(fft_values[dominant_frequency_index]) / len(input_signal) * 2
    phase = np.angle(fft_values[dominant_frequency_index])

    # Create a feature vector with the extracted features
    features = np.array([amplitude, frequency, phase]).reshape(1, -1)

    # Apply scaling to the feature vector
    input_signal_scaled = scaler.transform(features)

    # Make the prediction
    prediction = model.predict(input_signal_scaled)
    is_sine_wave = prediction[0] == 1  # 1 indicates sine wave

    return is_sine_wave

# Ejemplo de uso:
input_signal = np.random.rand(100)  # Señal de ruido
#input_signal = np.sin(2 * np.pi * 5 * np.linspace(0, 1, 100))  # Señal senoidal

# Clasificar la señal
result = classify_signal(input_signal, model, scaler)

if result:
    print("La señal de entrada es clasificada como una onda seno.")
else:
    print("La señal de entrada NO es clasificada como una onda seno.")

# (Opcional) Graficar la señal de entrada
plt.figure(figsize=(8, 6))
plt.plot(input_signal)
plt.title("Señal de Entrada")
plt.xlabel("Tiempo (muestras)")
plt.ylabel("Amplitud")
plt.grid(True)
plt.show()
